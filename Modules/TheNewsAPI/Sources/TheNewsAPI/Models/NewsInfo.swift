//
// NewsInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NewsInfo: Codable, JSONEncodable, Hashable {

    public private(set) var uuid: String
    public private(set) var title: String
    public private(set) var description: String
    public private(set) var url: String
    public private(set) var imageUrl: String?
    public private(set) var language: String?
    public private(set) var publishedAt: String?
    public private(set) var source: String
    public private(set) var categories: [String]?

    public init(uuid: String, title: String, description: String, url: String, imageUrl: String? = nil, language: String? = nil, publishedAt: String? = nil, source: String, categories: [String]? = nil) {
        self.uuid = uuid
        self.title = title
        self.description = description
        self.url = url
        self.imageUrl = imageUrl
        self.language = language
        self.publishedAt = publishedAt
        self.source = source
        self.categories = categories
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case title
        case description
        case url
        case imageUrl = "image_url"
        case language
        case publishedAt = "published_at"
        case source
        case categories
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(title, forKey: .title)
        try container.encode(description, forKey: .description)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(publishedAt, forKey: .publishedAt)
        try container.encode(source, forKey: .source)
        try container.encodeIfPresent(categories, forKey: .categories)
    }
}

