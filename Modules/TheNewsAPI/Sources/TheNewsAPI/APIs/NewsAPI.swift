//
// NewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NewsAPI {

    /**

     - parameter apiToken: (query)  
     - parameter limit: (query)  
     - parameter page: (query)  
     - parameter search: (query)  (optional)
     - parameter language: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newsAllGet(apiToken: String, limit: Int, page: Int, search: String? = nil, language: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200?, _ error: Error?) -> Void)) -> RequestTask {
        return newsAllGetWithRequestBuilder(apiToken: apiToken, limit: limit, page: page, search: search, language: language).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /news/all
     - parameter apiToken: (query)  
     - parameter limit: (query)  
     - parameter page: (query)  
     - parameter search: (query)  (optional)
     - parameter language: (query)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func newsAllGetWithRequestBuilder(apiToken: String, limit: Int, page: Int, search: String? = nil, language: String? = nil) -> RequestBuilder<InlineResponse200> {
        let localVariablePath = "/news/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api_token": apiToken,
            "limit": limit,
            "page": page,
            "search": search,
            "language": language,
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiToken: (query)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newsByUUIDGet(apiToken: String, uuid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewsInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return newsByUUIDGetWithRequestBuilder(apiToken: apiToken, uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /news/uuid/{uuid}
     - parameter apiToken: (query)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<NewsInfo> 
     */
    open class func newsByUUIDGetWithRequestBuilder(apiToken: String, uuid: String) -> RequestBuilder<NewsInfo> {
        var localVariablePath = "/news/uuid/{uuid}"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api_token": apiToken,
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
